#ifndef MESSAGE_TYPE
# define MESSAGE_TYPE

# include <string>
# include <map>

//see numeric specifications here : https://modern.ircdocs.horse/#numerics
enum MessageType {
	ERROR,
	QUIT,
	RPL_WELCOME,
	RPL_YOURHOST,
	RPL_CREATED,
	RPL_MYINFO,
	ERR_NOTREGISTERED,
	ERR_NEEDMOREPARAMS,
	ERR_ALREADYREGISTERED,
	ERR_UNKNOWNCOMMAND,
	ERR_NONICKNAMEGIVEN,
	ERR_ERRONEUSNICKNAME,
	ERR_NICKNAMEINUSE,
    ERR_PASSWDMISMATCH,
	ERR_NOSUCHNICK,
	ERR_NOSUCHCHANNEL,
	ERR_CANNOTSENDTOCHAN,
	ERR_NORECIPIENT,
	ERR_NOTEXTTOSEND,
	ERR_BADCHANNELKEY,
	ERR_INVITEONLYCHAN,
	RPL_TOPIC,
	RPL_NAMREPLY,
	RPL_ENDOFNAMES,
	RPL_INVITING,
    ERR_NOTONCHANNEL,
    ERR_USERONCHANNEL,
	RPL_UMODEIS,
	ERR_USERSDONTMATCH,
	ERR_UMODEUNKNOWNFLAG,
	ERR_UNKNOWNMODE,
	RPL_CHANNELMODEIS,
	RPL_CREATIONTIME,
	ERR_CHANOPRIVSNEEDED,
	ERR_USERNOTINCHANNEL,
	RPL_NOTOPIC,
	ERR_CHANNELISFULL
};

struct IrcErrorInfo
{
	std::string code;
	std::string message;

	IrcErrorInfo() {}
	IrcErrorInfo(const std::string& c, const std::string& m) : code(c), message(m) {}
};

const std::map<MessageType, IrcErrorInfo>& getErrorMap();

#endif
